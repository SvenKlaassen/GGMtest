rm(list=ls())
load("C:/Users/Sven/Downloads/FGK_setupA_dgp0.Rdata")
rm(list=ls())
rm(list=ls())
library("huge")
set.seed(42)
# generate data
L <- huge.generator(n = 100, d = 10, graph = "cluster", g = 4) #different graph structures including "random", "hub", "cluster", "band" and "scale-free".
# true Graph
true_graph <- graph_from_adjacency_matrix(as.matrix(L$theta) , mode='undirected', diag=F)
plot(true_graph, usearrows = FALSE, label=1:p,displaylabels=T,main = "True Graph",
layout= layout.fruchterman.reingold,edge.width = 2,edge.color = "black")
library("igraph")
set.seed(42)
# generate data
L <- huge.generator(n = 100, d = 10, graph = "cluster", g = 4) #different graph structures including "random", "hub", "cluster", "band" and "scale-free".
# true Graph
true_graph <- graph_from_adjacency_matrix(as.matrix(L$theta) , mode='undirected', diag=F)
plot(true_graph, usearrows = FALSE, label=1:p,displaylabels=T,main = "True Graph",
layout= layout.fruchterman.reingold,edge.width = 2,edge.color = "black")
rm(list=ls())
library("huge")
library("igraph")
set.seed(42)
# generate data
L <- huge.generator(n = 100, d = 10, graph = "cluster", g = 4) #different graph structures including "random", "hub", "cluster", "band" and "scale-free".
# true Graph
true_graph <- graph_from_adjacency_matrix(as.matrix(L$theta) , mode='undirected', diag=F)
plot(true_graph, usearrows = FALSE, label=1:10,displaylabels=T,main = "True Graph",
layout= layout.fruchterman.reingold,edge.width = 2,edge.color = "black")
library("GGMtest")
#### parameters for estimation ####
k_fold <- 1         # k-fold estimation
seed <- 422          # seed for replicability
alpha <- 0.1       # significance level
nboot <- 1000       # number of bootstrap repetitions
s <- 1              # s-sparse set for inference
exponent <- 1       # exponent for CI
nu_est <- "lasso"   # method for nuisance estimation including (lasso,post-lasso and sqrt-lasso)
S <- c(1,2,3,4)
matrix(S,byrow =F,ncol =2)
S <- matrix(c(1,2,2,3,4,5),byrow =T,ncol =2)
S
GGMtest(X,S, s=s, exponent=exponent, alpha = alpha, nbootstrap = nboot,
nuisance_estimaton = nu_est,k_fold = k_fold,rnd_seed = seed)
L$data
GGMtest(L$data,S, s=s, exponent=exponent, alpha = alpha, nbootstrap = nboot,
nuisance_estimaton = nu_est,k_fold = k_fold,rnd_seed = seed)
GGMtest(data = L$data,S, s=s, exponent=exponent, alpha = alpha, nbootstrap = nboot,
nuisance_estimaton = nu_est,k_fold = k_fold,rnd_seed = seed)
