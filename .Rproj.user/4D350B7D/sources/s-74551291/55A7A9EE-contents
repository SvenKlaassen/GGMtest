rm(list=ls())
package_list <- c("devtools","network","mvtnorm","stats","huge","tictoc","rootSolve","MASS","ggplot2","igraph")
invisible(lapply(package_list, library, character.only = TRUE))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
load_all("../R-Package/GGMtest")

set.seed(42)


#### parameters for estimation ####
k_fold <- 1         # k-fold estimation
seed <- 42          # seed for replicability
alpha <- 0.1        # significance level
nboot <- 1000       # number of bootstrap repetitions
s <- 1              # s-sparse set for inference
exponent <- 1       # exponent for CI
nu_est <- "lasso"   # method for nuisance estimation including (lasso,post-lasso and sqrt-lasso)

#### Estimating a whole simulated network ####

# generate data 
n <- 2000  # number of observations
p <- 25   # dimension of the gaussian vector
L <- huge.generator(n = n, d = p, v = .3, graph = "cluster", g = 4) #different graph structures including "random", "hub", "cluster", "band" and "scale-free".
L <- huge.generator(n = n, d = p, v = .1, graph = "random", prob = .3)
# all indices for inference
S_1 <- t(combn(p,2))
ggm_model_1 <- GGMtest(L$data,S_1,rep(0,dim(S_1)[1]), s=s, exponent=exponent, alpha = alpha, nbootstrap = nboot,
                     nuisance_estimaton = nu_est,k_fold = k_fold,rnd_seed = seed)


plot(ggm_model_1,edges = S_1[1:5,])
# true Graph
par(mfrow=c(1,3))
graph_layout <- layout.circle 
#graph_layout <- layout.fruchterman.reingold
true_adj_matrix <- as.matrix(L$theta)
true_graph <- graph_from_adjacency_matrix(true_adj_matrix , mode='undirected', diag=F )
plot(true_graph, usearrows = FALSE, vertex.label=1:p,displaylabels=T,main = "True Graph",
     layout= graph_layout,edge.color = "black",edge.width = 2)

# estimated graph
est_adj_matrix <- create_adj_GGM(ggm_model_1)
est_graph <- igraph::graph_from_adjacency_matrix(est_adj_matrix , mode='undirected', diag=F )
plot(est_graph, usearrows = FALSE, vertex.label=1:p,displaylabels=T,main = "Estimated Graph",
     layout= graph_layout,edge.color = "black",edge.width = 2)

#calculation matrix difference
diff_matrix <- true_adj_matrix - est_adj_matrix 
diff_graph <- igraph::graph_from_adjacency_matrix(diff_matrix  , mode='undirected', diag=F, weighted = T)
E(diff_graph)$color[E(diff_graph)$weight == 1] <- "blue"
E(diff_graph)$color[E(diff_graph)$weight == -1] <- "red"
plot(diff_graph, usearrows = FALSE, vertex.label=1:p,displaylabels=T,main = "Graph Differences",
     layout= graph_layout,edge.width = 2)
legend(x=-1.5, y=-1.1, c("False Positive","False Negative"), pch=21,
       col="#777777", pt.bg=c("red","blue"), pt.cex=2, cex=.8, bty="n", ncol=1)

par(mfrow=c(1,1))



#### An Example from Psychology ####
library("psych")
library("dplyr")
# obtain data
data(bfi)

df <- bfi %>%
  select(1:25) %>%
  na.omit() %>%
  apply(2,function(x) x-mean(x))
  
cat("Dimensions:",dim(df))

# Select indices for inference
S_2 <- matrix(c(c(3,1),
              c(2,3),
              c(1,2)), ncol = 2, byrow = T)
# all indices for inference
S_2 <- t(combn(25,2))

ggm_model_2 <- GGMtest(as.matrix(df),S_2,rep(0,dim(S_2)[1]), s=s, exponent=exponent, alpha = alpha, nbootstrap = nboot,
                 nuisance_estimaton = nu_est,k_fold = k_fold,rnd_seed = seed)

plot(ggm_model_2,edges = S_2[1:5,])
# estimated graph
est_adj_matrix <- create_adj_GGM(ggm_model_2)
est_graph <- igraph::graph_from_adjacency_matrix(est_adj_matrix , mode='undirected', diag=F )
plot(est_graph, usearrows = FALSE, vertex.label=colnames(df),displaylabels=T,main = "Estimated Graph",
     layout= layout.fruchterman.reingold,edge.color = "black",edge.width = 2)


# number of edges
sum(!(0>confint(ggm_model_2)[,1]&confint(ggm_model_2)[,2]>0))


