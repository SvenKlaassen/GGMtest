null_hyp =0,
alpha = 0.1,
nbootstrap = 500,
nuisance_estimaton = "sqrt-lasso",
method = "root",
s=1,
exponent=1)
v_hyp_max[h]<- ggm_model$hyp_max
if (h%%(l/10)==0){
cat("step", h, "out of" , l,"\n")
toc()
tic("time difference")
}
}
toc(quiet = T )
toc()
sprintf("Coverage: %s", sum(v_hyp_max)/l)
rm(list=ls())
package_list <- c("huge","tictoc","igraph","GGMtest")
invisible(lapply(package_list, library, character.only = TRUE))
rm(list=ls())
library(huge)
library(tictoc)
library(igraph)
set.seed(42)
#### generate data ####
n <- 200  # number of observations
p <- 40   # dimension of the gaussian vector
l <- 100   # number of independent Monte-Carlo Estimation
# generate data
L <- huge.generator(n = l*n, d = p, graph = "cluster", g = 4) #different graph structures including "random", "hub", "cluster", "band" and "scale-free".
# true Graph
true_graph <- graph_from_adjacency_matrix(as.matrix(L$theta) , mode='undirected', diag=F )
plot(true_graph, usearrows = FALSE, label=1:p,displaylabels=T,main = "True Graph",
layout= layout.fruchterman.reingold,edge.width = 2,edge.color = "black")
# index pairs for inference
# Testing independence of cluster one and two
p_2 = p/4
S_1 <- c()
for (i in 1:p_2){
S_1 <- c(S_1,rep(i,p_2))
}
for (i in 1:p_2){
S_1 <- c(S_1,(p_2+1):(2*p_2))
}
S <- matrix(S_1,byrow =F,ncol =2)
p_1 = dim(S)[1]
#S <-  rbind(S,c(1,2))
#### Estimation ####
v_hyp_max <- vector("logical",l)
tic("total time")
tic("time difference")
for (h in 1:l){
X <- L$data[((h-1)*n+1):(h*n),]
#### GGMtest ####
ggm_model <- GGMtest(data = X,
edges = S,
null_hyp = 0,
alpha = 0.1,
nbootstrap = 500,
nuisance_estimaton = "sqrt-lasso",
method = "root",
s=1,
exponent=1)
v_hyp_max[h]<- ggm_model$hyp_max
if (h%%(l/10)==0){
cat("step", h, "out of" , l,"\n")
toc()
tic("time difference")
}
}
toc(quiet = T )
toc()
sprintf("Coverage: %s", sum(v_hyp_max)/l)
rm(list=ls())
package_list <- c("huge","tictoc","igraph","GGMtest")
invisible(lapply(package_list, library, character.only = TRUE))
rm(list=ls())
library(huge)
library(tictoc)
library(igraph)
set.seed(42)
#### generate data ####
n <- 200  # number of observations
p <- 40   # dimension of the gaussian vector
l <- 100   # number of independent Monte-Carlo Estimation
# generate data
L <- huge.generator(n = l*n, d = p, graph = "cluster", g = 4) #different graph structures including "random", "hub", "cluster", "band" and "scale-free".
# true Graph
true_graph <- graph_from_adjacency_matrix(as.matrix(L$theta) , mode='undirected', diag=F )
plot(true_graph, usearrows = FALSE, label=1:p,displaylabels=T,main = "True Graph",
layout= layout.fruchterman.reingold,edge.width = 2,edge.color = "black")
# index pairs for inference
# Testing independence of cluster one and two
p_2 = p/4
S_1 <- c()
for (i in 1:p_2){
S_1 <- c(S_1,rep(i,p_2))
}
for (i in 1:p_2){
S_1 <- c(S_1,(p_2+1):(2*p_2))
}
S <- matrix(S_1,byrow =F,ncol =2)
p_1 = dim(S)[1]
#S <-  rbind(S,c(1,2))
#### Estimation ####
v_hyp_max <- vector("logical",l)
tic("total time")
tic("time difference")
for (h in 1:l){
X <- L$data[((h-1)*n+1):(h*n),]
#### GGMtest ####
ggm_model <- GGMtest(data = X,
edges = S,
null_hyp = 0,
alpha = 0.1,
nbootstrap = 500,
nuisance_estimaton = "sqrt-lasso",
method = "partialling out",
s=1,
exponent=1)
v_hyp_max[h]<- ggm_model$hyp_max
if (h%%(l/10)==0){
cat("step", h, "out of" , l,"\n")
toc()
tic("time difference")
}
}
toc(quiet = T )
toc()
sprintf("Coverage: %s", sum(v_hyp_max)/l)
rm(list=ls())
package_list <- c("huge","tictoc","igraph","GGMtest")
invisible(lapply(package_list, library, character.only = TRUE))
rm(list=ls())
library(huge)
library(tictoc)
library(igraph)
set.seed(42)
#### generate data ####
n <- 200  # number of observations
p <- 20   # dimension of the gaussian vector
l <- 100   # number of independent Monte-Carlo Estimation
# generate data
L <- huge.generator(n = l*n, d = p, graph = "cluster", g = 4) #different graph structures including "random", "hub", "cluster", "band" and "scale-free".
# true Graph
true_graph <- graph_from_adjacency_matrix(as.matrix(L$theta) , mode='undirected', diag=F )
plot(true_graph, usearrows = FALSE, label=1:p,displaylabels=T,main = "True Graph",
layout= layout.fruchterman.reingold,edge.width = 2,edge.color = "black")
# index pairs for inference
# Testing independence of cluster one and two
p_2 = p/4
S_1 <- c()
for (i in 1:p_2){
S_1 <- c(S_1,rep(i,p_2))
}
for (i in 1:p_2){
S_1 <- c(S_1,(p_2+1):(2*p_2))
}
S <- matrix(S_1,byrow =F,ncol =2)
p_1 = dim(S)[1]
#S <-  rbind(S,c(1,2))
#### Estimation ####
v_hyp_max <- vector("logical",l)
tic("total time")
tic("time difference")
for (h in 1:l){
X <- L$data[((h-1)*n+1):(h*n),]
#### GGMtest ####
ggm_model <- GGMtest(data = X,
edges = S,
null_hyp = 0,
alpha = 0.1,
nbootstrap = 500,
nuisance_estimaton = "sqrt-lasso",
method = "root",
s=1,
exponent=1)
v_hyp_max[h]<- ggm_model$hyp_max
if (h%%(l/10)==0){
cat("step", h, "out of" , l,"\n")
toc()
tic("time difference")
}
}
toc(quiet = T )
toc()
sprintf("Coverage: %s", sum(v_hyp_max)/l)
rm(list=ls())
package_list <- c("huge","tictoc","igraph","GGMtest")
invisible(lapply(package_list, library, character.only = TRUE))
rm(list=ls())
library(huge)
library(tictoc)
library(igraph)
set.seed(42)
#### generate data ####
n <- 200  # number of observations
p <- 20   # dimension of the gaussian vector
l <- 200   # number of independent Monte-Carlo Estimation
# generate data
L <- huge.generator(n = l*n, d = p, graph = "cluster", g = 4) #different graph structures including "random", "hub", "cluster", "band" and "scale-free".
# true Graph
true_graph <- graph_from_adjacency_matrix(as.matrix(L$theta) , mode='undirected', diag=F )
plot(true_graph, usearrows = FALSE, label=1:p,displaylabels=T,main = "True Graph",
layout= layout.fruchterman.reingold,edge.width = 2,edge.color = "black")
# index pairs for inference
# Testing independence of cluster one and two
p_2 = p/4
S_1 <- c()
for (i in 1:p_2){
S_1 <- c(S_1,rep(i,p_2))
}
for (i in 1:p_2){
S_1 <- c(S_1,(p_2+1):(2*p_2))
}
S <- matrix(S_1,byrow =F,ncol =2)
p_1 = dim(S)[1]
#S <-  rbind(S,c(1,2))
#### Estimation ####
v_hyp_max <- vector("logical",l)
tic("total time")
tic("time difference")
for (h in 1:l){
X <- L$data[((h-1)*n+1):(h*n),]
#### GGMtest ####
ggm_model <- GGMtest(data = X,
edges = S,
null_hyp = 0,
alpha = 0.1,
nbootstrap = 500,
nuisance_estimaton = "sqrt-lasso",
method = "root",
s=1,
exponent=1)
v_hyp_max[h]<- ggm_model$hyp_max
if (h%%(l/10)==0){
cat("step", h, "out of" , l,"\n")
toc()
tic("time difference")
}
}
toc(quiet = T )
toc()
sprintf("Coverage: %s", sum(v_hyp_max)/l)
library(GGMtest)
install.packages("rmarkdown")
library(GGMtest)
set.seed(42)
#### generate data ####
n <- 200  # number of observations
p <- 20   # dimension of the gaussian vector
l <- 100    # number of independent Monte-Carlo Estimation
# generate data
L <- huge.generator(n = l*n, d = p, graph = "cluster", g = 4) #different graph structures including "random", "hub", "cluster", "band" and "scale-free".
# true Graph
true_graph <- graph_from_adjacency_matrix(as.matrix(L$theta) , mode='undirected', diag=F )
plot(true_graph, usearrows = FALSE, label=1:p,displaylabels=T,main = "True Graph",
layout= layout.fruchterman.reingold,edge.width = 2,edge.color = "black")
#### parameters for estimation ####
k_fold <- 1         # k-fold estimation
alpha <- 0.05       # significance level
nboot <- 1000       # number of bootstrap repetitions
nu_est <- "sqrt-lasso"   # method for nuisance estimation including (lasso,post-lasso and sqrt-lasso)
#index pairs for inference
p_2 = p/4
S_1 <- c()
for (i in 1:p_2){
S_1 <- c(S_1,rep(i,p_2))
}
for (i in 1:p_2){
S_1 <- c(S_1,(p_2+1):(2*p_2))
}
S <- matrix(S_1,byrow =F,ncol =2)
p_1 = dim(S)[1]
S[1,] <- c(1,2)
S[2,] <- c(1,3)
S[3,] <- c(1,4)
S[4,] <- c(1,5)
#### Estimation ####
v_hyp_max <- vector("logical",l)
v_hyp_sphere <- vector("logical",l)
tic("total time")
tic("time difference")
for (h in 1:l){
X <- L$data[((h-1)*n+1):(h*n),]
#### GGMtest ####
ggm_model <- GGMtest(data = X,edges = S, s=1, exponent=1, alpha = alpha, nbootstrap = nboot,
nuisance_estimaton = nu_est,k_fold = k_fold)
ggm_model_sphere <- GGMtest(data = X,edges = S, s = 2, exponent = 2, alpha = alpha, nbootstrap = nboot,
nuisance_estimaton = nu_est,k_fold = k_fold)
v_hyp_max[h]<- ggm_model$hyp_max
v_hyp_sphere[h] <- ggm_model_sphere$hyp_max
if (h%%(l/10)==0){
cat("step", h, "out of" , l,"\n")
toc()
tic("time difference")
}
}
toc(quiet = T )
toc()
sprintf("Power max: %s", 1-sum(v_hyp_max)/l)
sprintf("Power Sphere: %s", 1-sum(v_hyp_max)/l)
#plotting confidence intervals
#only usable for s=1
plot_GGMtest(ggm_model,edges = S[1:5,])
plot_GGMtest(ggm_model_sphere,edges = S[1:5,])
library(huge)
set.seed(42)
#### generate data ####
n <- 200  # number of observations
p <- 20   # dimension of the gaussian vector
l <- 100    # number of independent Monte-Carlo Estimation
# generate data
L <- huge.generator(n = l*n, d = p, graph = "cluster", g = 4) #different graph structures including "random", "hub", "cluster", "band" and "scale-free".
# true Graph
true_graph <- graph_from_adjacency_matrix(as.matrix(L$theta) , mode='undirected', diag=F )
plot(true_graph, usearrows = FALSE, label=1:p,displaylabels=T,main = "True Graph",
layout= layout.fruchterman.reingold,edge.width = 2,edge.color = "black")
#### parameters for estimation ####
k_fold <- 1         # k-fold estimation
alpha <- 0.05       # significance level
nboot <- 1000       # number of bootstrap repetitions
nu_est <- "sqrt-lasso"   # method for nuisance estimation including (lasso,post-lasso and sqrt-lasso)
#index pairs for inference
p_2 = p/4
S_1 <- c()
for (i in 1:p_2){
S_1 <- c(S_1,rep(i,p_2))
}
for (i in 1:p_2){
S_1 <- c(S_1,(p_2+1):(2*p_2))
}
S <- matrix(S_1,byrow =F,ncol =2)
p_1 = dim(S)[1]
S[1,] <- c(1,2)
S[2,] <- c(1,3)
S[3,] <- c(1,4)
S[4,] <- c(1,5)
#### Estimation ####
v_hyp_max <- vector("logical",l)
v_hyp_sphere <- vector("logical",l)
tic("total time")
tic("time difference")
for (h in 1:l){
X <- L$data[((h-1)*n+1):(h*n),]
#### GGMtest ####
ggm_model <- GGMtest(data = X,edges = S, s=1, exponent=1, alpha = alpha, nbootstrap = nboot,
nuisance_estimaton = nu_est,k_fold = k_fold)
ggm_model_sphere <- GGMtest(data = X,edges = S, s = 2, exponent = 2, alpha = alpha, nbootstrap = nboot,
nuisance_estimaton = nu_est,k_fold = k_fold)
v_hyp_max[h]<- ggm_model$hyp_max
v_hyp_sphere[h] <- ggm_model_sphere$hyp_max
if (h%%(l/10)==0){
cat("step", h, "out of" , l,"\n")
toc()
tic("time difference")
}
}
toc(quiet = T )
toc()
sprintf("Power max: %s", 1-sum(v_hyp_max)/l)
sprintf("Power Sphere: %s", 1-sum(v_hyp_max)/l)
#plotting confidence intervals
#only usable for s=1
plot_GGMtest(ggm_model,edges = S[1:5,])
plot_GGMtest(ggm_model_sphere,edges = S[1:5,])
library(tictoc)
set.seed(42)
### generate data ####
n <- 200  # number of observations
p <- 20   # dimension of the gaussian vector
l <- 100    # number of independent Monte-Carlo Estimation
# generate data
L <- huge.generator(n = l*n, d = p, graph = "cluster", g = 4) #different graph structures including "random", "hub", "cluster", "band" and "scale-free".
# true Graph
true_graph <- graph_from_adjacency_matrix(as.matrix(L$theta) , mode='undirected', diag=F )
plot(true_graph, usearrows = FALSE, label=1:p,displaylabels=T,main = "True Graph",
layout= layout.fruchterman.reingold,edge.width = 2,edge.color = "black")
#### parameters for estimation ####
k_fold <- 1         # k-fold estimation
alpha <- 0.05       # significance level
nboot <- 1000       # number of bootstrap repetitions
nu_est <- "sqrt-lasso"   # method for nuisance estimation including (lasso,post-lasso and sqrt-lasso)
#index pairs for inference
p_2 = p/4
S_1 <- c()
for (i in 1:p_2){
S_1 <- c(S_1,rep(i,p_2))
}
for (i in 1:p_2){
S_1 <- c(S_1,(p_2+1):(2*p_2))
}
S <- matrix(S_1,byrow =F,ncol =2)
p_1 = dim(S)[1]
S[1,] <- c(1,2)
S[2,] <- c(1,3)
S[3,] <- c(1,4)
S[4,] <- c(1,5)
#### Estimation ####
v_hyp_max <- vector("logical",l)
v_hyp_sphere <- vector("logical",l)
tic("total time")
tic("time difference")
for (h in 1:l){
X <- L$data[((h-1)*n+1):(h*n),]
#### GGMtest ####
ggm_model <- GGMtest(data = X,edges = S, s=1, exponent=1, alpha = alpha, nbootstrap = nboot,
nuisance_estimaton = nu_est,k_fold = k_fold)
ggm_model_sphere <- GGMtest(data = X,edges = S, s = 2, exponent = 2, alpha = alpha, nbootstrap = nboot,
nuisance_estimaton = nu_est,k_fold = k_fold)
v_hyp_max[h]<- ggm_model$hyp_max
v_hyp_sphere[h] <- ggm_model_sphere$hyp_max
if (h%%(l/10)==0){
cat("step", h, "out of" , l,"\n")
toc()
tic("time difference")
}
}
toc(quiet = T )
toc()
sprintf("Power max: %s", 1-sum(v_hyp_max)/l)
sprintf("Power Sphere: %s", 1-sum(v_hyp_max)/l)
#plotting confidence intervals
#only usable for s=1
plot_GGMtest(ggm_model,edges = S[1:5,])
plot_GGMtest(ggm_model_sphere,edges = S[1:5,])
load("//ad.uni-hamburg.de/basis/mit/bm01/BAM5698/Downloads/grid_002.RData")
#minimal eigenvalues ####
for (i in 1:length(res)){print(min(res[[i]]$eigenvalues))}
# plot results ####
library(ggplot2)
plot_df <- data.frame("violation"= double(),
"value" = double(),
"Method" = character(),
"param_comb" = integer())
for (i in 1:length(res)){
method <- rep(c("Chang",
"GGMtest_s1_exp1","GGMtest(Sphere)_s1_exp1",
"GGMtest_s5_exp1","GGMtest(Sphere)_s5_exp1",
"GGMtest_s10_exp1","GGMtest(Sphere)_s10_exp1",
"GGMtest_s5_exp2","GGMtest(Sphere)_s5_exp2",
"GGMtest_s10_exp2","GGMtest(Sphere)_s10_exp2"),
each = length(violation_strength_vec))
value <- c(res[[i]]$Chang,
res[[i]]$GGM_test[,1],
res[[i]]$GGM_test_sphere[,1],
res[[i]]$GGM_test[,2],
res[[i]]$GGM_test_sphere[,2],
res[[i]]$GGM_test[,3],
res[[i]]$GGM_test_sphere[,3],
res[[i]]$GGM_test[,4],
res[[i]]$GGM_test_sphere[,4],
res[[i]]$GGM_test[,5],
res[[i]]$GGM_test_sphere[,5])
plot_df <- rbind(plot_df,data.frame("violation"= rep(violation_strength_vec,11),
"value" = value,
"Method" = method,
"param_comb" = i))
}
ggplot(plot_df,aes(x = violation)) +
geom_line(aes(y = value, color = Method)) +
geom_hline(yintercept = 0.05) +
facet_wrap(. ~ param_comb) +
theme(legend.position = "bottom") +
ggtitle("Power Comparison") +
ylab("Power") +
ylim(c(0,0.6)) +
xlab("Strength of Violation")
parameter_grid
#minimal eigenvalues ####
for (i in 1:length(res)){print(min(res[[i]]$eigenvalues))}
# plot results ####
library(ggplot2)
plot_df <- data.frame("violation"= double(),
"value" = double(),
"Method" = character(),
"param_comb" = integer())
for (i in 1:length(res)){
method <- rep(c("Chang",
"GGMtest_s1_exp1","GGMtest(Sphere)_s1_exp1",
"GGMtest_s5_exp1","GGMtest(Sphere)_s5_exp1",
"GGMtest_s10_exp1","GGMtest(Sphere)_s10_exp1",
"GGMtest_s5_exp2","GGMtest(Sphere)_s5_exp2",
"GGMtest_s10_exp2","GGMtest(Sphere)_s10_exp2"),
each = length(violation_strength_vec))
value <- c(res[[i]]$Chang,
res[[i]]$GGM_test[,1],
res[[i]]$GGM_test_sphere[,1],
res[[i]]$GGM_test[,2],
res[[i]]$GGM_test_sphere[,2],
res[[i]]$GGM_test[,3],
res[[i]]$GGM_test_sphere[,3],
res[[i]]$GGM_test[,4],
res[[i]]$GGM_test_sphere[,4],
res[[i]]$GGM_test[,5],
res[[i]]$GGM_test_sphere[,5])
plot_df <- rbind(plot_df,data.frame("violation"= rep(violation_strength_vec,11),
"value" = value,
"Method" = method,
"param_comb" = i))
}
ggplot(plot_df,aes(x = violation)) +
geom_line(aes(y = value, color = Method)) +
geom_hline(yintercept = 0.05) +
facet_wrap(. ~ param_comb) +
theme(legend.position = "bottom") +
ggtitle("Power Comparison") +
ylab("Power") +
ylim(c(0,1)) +
xlab("Strength of Violation")
library(GGMtest)
